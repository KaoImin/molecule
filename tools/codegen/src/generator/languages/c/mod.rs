use std::io;

use crate::{ast::verified as ast, VERSION};

#[macro_use]
pub(self) mod utilities;

mod builder;
mod reader;

use self::{builder::GenBuilder, reader::GenReader};

pub(crate) struct Generator;

impl Generator {
    fn title<W: io::Write>(writer: &mut W, title: &str) -> io::Result<()> {
        writeln!(writer, "/*")?;
        writeln!(writer, " * {}", title)?;
        writeln!(writer, " */")?;
        writeln!(writer)
    }
}

impl super::LanguageGenerator for Generator {
    fn generate<W: io::Write>(writer: &mut W, ast: &ast::Ast) -> io::Result<()> {
        writeln!(writer, "// Generated by Molecule {}", VERSION)?;
        writeln!(writer)?;
        writeln!(writer, r#"#include "molecule_reader.h""#)?;
        writeln!(writer, r#"#include "molecule_builder.h""#)?;
        writeln!(writer)?;
        Self::title(writer, "Reader APIs")?;
        for decl in &ast.decls[..] {
            decl.gen_reader_interfaces(writer)?;
        }
        writeln!(writer)?;
        Self::title(writer, "Builder APIs")?;
        for decl in &ast.decls[..] {
            decl.gen_builder_interfaces(writer)?;
        }
        writeln!(writer)?;
        Self::title(writer, "Default Value")?;
        writeln!(writer, r#"#define ____ 0x00"#)?;
        writeln!(writer)?;
        for decl in &ast.decls[..] {
            decl.gen_default(writer)?;
        }
        writeln!(writer)?;
        writeln!(writer, r#"#undef ____"#)?;
        writeln!(writer)?;
        Self::title(writer, "Reader Functions")?;
        for decl in &ast.decls[..] {
            decl.gen_reader_functions(writer)?;
        }
        writeln!(writer)?;
        Self::title(writer, "Builder Functions")?;
        for decl in &ast.decls[..] {
            decl.gen_builder_functions(writer)?;
        }
        Ok(())
    }
}
